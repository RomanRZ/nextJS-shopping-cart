{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"F:\\\\Programming\\\\TEST-TASKS\\\\theadmasters\\\\admasters\\\\lib\\\\with-redux-store.js\";\nimport React from 'react';\nimport { initializeStore } from '../app/store/store';\nconst isServer = typeof window === 'undefined';\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nexport default (App => {\n  return class AppWithRedux extends React.Component {\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages\n\n      appContext.ctx.reduxStore = reduxStore;\n      let appProps = {};\n\n      if (typeof App.getInitialProps === 'function') {\n        appProps = await App.getInitialProps(appContext);\n      }\n\n      return _objectSpread({}, appProps, {\n        initialReduxState: reduxStore.getState()\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n    }\n\n    render() {\n      return React.createElement(App, _extends({}, this.props, {\n        reduxStore: this.reduxStore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    }\n\n  };\n});","map":{"version":3,"sources":["F:\\Programming\\TEST-TASKS\\theadmasters\\admasters\\lib\\with-redux-store.js"],"names":["React","initializeStore","isServer","window","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","App","AppWithRedux","Component","getInitialProps","appContext","reduxStore","ctx","appProps","initialReduxState","getState","constructor","props","render"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,MAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;AACA,MAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC;AACA,MAAIJ,QAAJ,EAAc;AACZ,WAAOD,eAAe,CAACK,YAAD,CAAtB;AACD,GAJqC,CAMtC;;;AACA,MAAI,CAACH,MAAM,CAACC,oBAAD,CAAX,EAAmC;AACjCD,IAAAA,MAAM,CAACC,oBAAD,CAAN,GAA+BH,eAAe,CAACK,YAAD,CAA9C;AACD;;AACD,SAAOH,MAAM,CAACC,oBAAD,CAAb;AACD;;AAED,gBAAeG,GAAG,IAAI;AACpB,SAAO,MAAMC,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAA2C;AAChD,iBAAaC,eAAb,CAA6BC,UAA7B,EAAyC;AACvC;AACA;AACA,YAAMC,UAAU,GAAGP,gBAAgB,EAAnC,CAHuC,CAKvC;;AACAM,MAAAA,UAAU,CAACE,GAAX,CAAeD,UAAf,GAA4BA,UAA5B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAI,OAAOP,GAAG,CAACG,eAAX,KAA+B,UAAnC,EAA+C;AAC7CI,QAAAA,QAAQ,GAAG,MAAMP,GAAG,CAACG,eAAJ,CAAoBC,UAApB,CAAjB;AACD;;AAED,+BACKG,QADL;AAEEC,QAAAA,iBAAiB,EAAEH,UAAU,CAACI,QAAX;AAFrB;AAID;;AAEDC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKN,UAAL,GAAkBP,gBAAgB,CAACa,KAAK,CAACH,iBAAP,CAAlC;AACD;;AAEDI,IAAAA,MAAM,GAAG;AACP,aAAO,oBAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,QAAA,UAAU,EAAE,KAAKN,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AA3B+C,GAAlD;AA6BD,CA9BD","sourcesContent":["import React from 'react';\nimport { initializeStore } from '../app/store/store';\n\nconst isServer = typeof window === 'undefined';\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n  return window[__NEXT_REDUX_STORE__];\n}\n\nexport default App => {\n  return class AppWithRedux extends React.Component {\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrCreateStore();\n\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.reduxStore = reduxStore;\n\n      let appProps = {};\n      if (typeof App.getInitialProps === 'function') {\n        appProps = await App.getInitialProps(appContext);\n      }\n\n      return {\n        ...appProps,\n        initialReduxState: reduxStore.getState()\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.reduxStore = getOrCreateStore(props.initialReduxState);\n    }\n\n    render() {\n      return <App {...this.props} reduxStore={this.reduxStore} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}